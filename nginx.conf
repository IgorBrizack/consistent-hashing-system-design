user nginx;
worker_processes auto;


error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events { 
    worker_connections 4096; 
}


http {
    ## Logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" '
    'req_id=$request_id shard=$shard_key upstream=$upstream_addr';
    access_log /var/log/nginx/access.log main;

    ## Tunings b√°sicos
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65s;
    types_hash_max_size 4096;
    server_tokens off;

    ## Gzip (seguro para JSON/textos)
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types
    application/json application/javascript text/css text/plain text/xml
    application/xml application/xml+rss application/x-font-ttf
    image/svg+xml application/vnd.ms-fontobject font/opentype;

    ## Timeouts do proxy
    proxy_connect_timeout 2s;
    proxy_read_timeout 30s;
    proxy_send_timeout 10s;
    proxy_http_version 1.1;
    proxy_set_header Connection ""; # habilita keep-alive com upstream

    ## Shard key (header X-Tenant-Id). Se faltar, cai para $remote_addr
    map $http_x_tenant_id $shard_key {
    default $http_x_tenant_id;
    "" $remote_addr;
    }

    ## Rate limit por shard key
    # ~20 req/seg por tenant com burst de 20
    limit_req_zone $shard_key zone=req_per_tenant:10m rate=20r/s;


    ## Upstream consistente com virtual nodes via weight
    upstream app_ring {
    hash $shard_key consistent;


    # Ajuste os weights para simular virtual nodes
    server server1:8080 weight=4 max_fails=3 fail_timeout=10s;
    server server2:8080 weight=3 max_fails=3 fail_timeout=10s;
    server server3:8080 weight=2 max_fails=3 fail_timeout=10s;
    server server4:8080 weight=1 max_fails=3 fail_timeout=10s;


    keepalive 128;
    }

    server {
    listen 80;
    underscores_in_headers on; # permite X-Tenant-Id


    # Rate limit por tenant (shard)
    limit_req zone=req_per_tenant burst=20 nodelay;


    location /healthz {
    return 200 'ok';
    add_header Content-Type text/plain;
    }


    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Request-Id $request_id;
        proxy_set_header X-Tenant-Id $http_x_tenant_id; # propaga


        proxy_pass http://app_ring;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        }
    }
}